import { useCreateMessage } from "@/api/messages/use-create-message";
import { useGenerateUploadUrl } from "@/api/upload/use-generate-upload-url";
import useGetWorkspaceId from "@/hooks/use-get-workspace-id";
import dynamic from "next/dynamic";
import Quill from "quill";
import { useRef, useState } from "react";

import { toast } from "sonner";
import { Id } from "../../../convex/_generated/dataModel";
import { ConvexError } from "convex/values";

const Editor = dynamic(() => import("../input/editor"), { ssr: false });

interface ConversationChatInputProps {
  placeholder: string;
  conversationId: Id<"conversations">;
}

type MessageSubmitType = {
  body: string;
  image?: File | null;
};

type CreateMessageValues = {
  conversationId: Id<"conversations">;
  workspaceId: Id<"workspaces">;
  body: MessageSubmitType["body"];
  image: Id<"_storage"> | undefined;
};

function ConversationsChatInput(props: Readonly<ConversationChatInputProps>) {
  const { placeholder, conversationId } = props;
  const workspaceId = useGetWorkspaceId();
  const {
    data: _messageId,
    mutateAsync: createMessage,
    error: messageError,
  } = useCreateMessage({
    onError: handleMessageError,
    onSuccess: handleMessageSuccess,
    onSettled: handleMessageSettled,
  });

  const editorRef = useRef<Quill | null>(null);
  const {
    isPending: isGeneratingUploadUrl,
    error: uploadUrlError,
    mutateAsync: generateUploadUrl,
  } = useGenerateUploadUrl({
    onError: handleGenerateUploadUrlError,
    onSettled: handleGenerateUploadUrlSettled,
  });

  //dirty trick that destroys old editor and rerenders a new one with a new key
  const [editorKey, setEditorKey] = useState(0);
  const [isChatPending, setIsChatPending] = useState(false);

  function handleMessageError() {
    toast.error("Something went wrong in sending the message");
    console.log("error: ", messageError);
  }

  function handleMessageSuccess() {
    setEditorKey((e) => e + 1);
  }

  function handleMessageSettled() {
    setIsChatPending(false);
    editorRef?.current?.enable(true);
  }

  function handleGenerateUploadUrlError() {
    toast.error("Something went wrong in trying to upload the image");
    console.log("error: " + uploadUrlError);
  }

  function handleGenerateUploadUrlSettled() {
    setIsChatPending(isGeneratingUploadUrl);
  }
  async function handleSubmit(submitData: MessageSubmitType) {
    console.log(submitData);
    setIsChatPending(true);
    editorRef?.current?.enable(false);

    const messageValues: CreateMessageValues = {
      workspaceId: workspaceId,
      conversationId: conversationId,
      body: submitData.body,
      image: undefined,
    };

    if (submitData.image) {
      setIsChatPending(true);
      const url = await generateUploadUrl({});

      try {
        //api call that requests to upload a file on the server of the url
        //the url is generated by convex thru the generateUploadUrl method
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": submitData.image.type,
          },
          body: submitData.image,
        });

        if (!response.ok) {
          throw new ConvexError({
            message: "[client][upload image]: url not found",
          });
        }

        const { storageId } = await response.json();

        //when everything is successful, the image should be uploaded in the convex storage
        //and you can get the reference of that document through the response json
        messageValues.image = storageId;
      } catch (error) {
        toast.error("Something went wrong with uploading the image", {
          description: "error:" + error,
        });
      }
    }

    //send the messageValues as args to the convex api
    await createMessage(messageValues);
  }

  return (
    <div className="px-5 w-full">
      <Editor
        key={editorKey}
        variant="create"
        onSubmit={handleSubmit}
        disabled={isChatPending}
        innerRef={editorRef}
        placeholder={placeholder}
      />
    </div>
  );
}

export default ConversationsChatInput;
